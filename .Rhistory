getwd()
options(max.print = 1000, scipen = 999, width = 80) library(RevoScaleR) rxOptions(reportProgress = 1) # reduces the amount of output RevoScaleR produces library(dplyr) options(dplyr.print_max = 20) options(dplyr.width = Inf) # shows all columns of a tbl_df object library(stringr) library(lubridate) library(rgeos) # spatial package library(sp) # spatial package library(maptools) # spatial package library(ggplot2) library(gridExtra) # for putting plots side by side library(ggrepel) # avoid text overlap in plots library(tidyr) library(seriation) # package for reordering a distance matrix
col_classes <- c('VendorID' = "factor",                  'tpep_pickup_datetime' = "character",                  'tpep_dropoff_datetime' = "character",                  'passenger_count' = "integer",                  'trip_distance' = "numeric",                  'pickup_longitude' = "numeric",                  'pickup_latitude' = "numeric",                  'RateCodeID' = "factor",                  'store_and_fwd_flag' = "factor",                  'dropoff_longitude' = "numeric",                  'dropoff_latitude' = "numeric",                  'payment_type' = "factor",                  'fare_amount' = "numeric",                  'extra' = "numeric",                  'mta_tax' = "numeric",                  'tip_amount' = "numeric",                  'tolls_amount' = "numeric",                  'improvement_surcharge' = "numeric",                  'total_amount' = "numeric")
data_dir <- "data/"
input_csv <- paste0(data_dir, 'yellow_tripdata_2015-01.csv') # we take a chunk of the data and load it as a data.frame (good for testing things) nyc_sample_df <- read.csv(input_csv, nrows = 1000, colClasses = col_classes) head(nyc_sample_df)
data_dir
?sprintf
input_xdf <- 'yellow_tripdata_2015.xdf' st <- Sys.time() rxImport(input_csv, input_xdf, colClasses = col_classes, overwrite = TRUE) for(ii in 2:3) { # get each month's data and append it to the first month's data     input_csv <- sprintf(paste0(data_dir, "yellow_tripdata_2015-%02d.csv"), ii)     rxImport(input_csv, input_xdf,               colClasses = col_classes,               overwrite = TRUE,               append = "rows")     print(input_csv) } Sys.time() - st # stores the time it took to import
input_xdf <- 'yellow_tripdata_2015.xdf' nyc_xdf <- RxXdfData(input_xdf) rxSummary( ~ fare_amount, nyc_xdf) # provide statistical summaries for fare amount
rxGetInfo(nyc_xdf, getVarInfo = TRUE) # show column types and the first 10 rows
head(nyc_xdf)
rxDataStep(nyc_xdf, nyc_xdf,             transforms = list(tip_percent = tip_amount/fare_amount),            overwrite = TRUE) rxSummary( ~ tip_percent, nyc_xdf)
getwd()
list.files()
yellow_tripdata_2015.xdf
ls()[9]
ls()
nyc_xdf
rxGetInfo(nyc_xdf)
f_datetime_transformations <- function(data) { # transformation function for extracting some date and time features   weekday_labels <- c('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat')   cut_levels <- c(1, 5, 9, 12, 16, 18, 22)   hour_labels <- c('1AM-5AM', '5AM-9AM', '9AM-12PM', '12PM-4PM', '4PM-6PM', '6PM-10PM', '10PM-1AM')   pickup_datetime <- ymd_hms(data$tpep_pickup_datetime, tz = "UTC")   pickup_hour <- addNA(cut(hour(pickup_datetime), cut_levels))   pickup_dow <- factor(wday(pickup_datetime), levels = 1:7, labels = weekday_labels)   levels(pickup_hour) <- hour_labels   dropoff_datetime <- ymd_hms(data$tpep_dropoff_datetime, tz = "UTC")   dropoff_hour <- addNA(cut(hour(dropoff_datetime), cut_levels))   dropoff_dow <- factor(wday(dropoff_datetime), levels = 1:7, labels = weekday_labels)   levels(dropoff_hour) <- hour_labels   data$pickup_hour <- pickup_hour   data$pickup_dow <- pickup_dow   data$dropoff_hour <- dropoff_hour   data$dropoff_dow <- dropoff_dow   data$trip_duration <- as.integer(as.duration(dropoff_datetime - pickup_datetime))   data }
library(lubridate) Sys.setenv(TZ = "US/Eastern") # not important for this dataset head(f_datetime_transformations(nyc_sample_df)) # test the function on a data.frame
head(rxDataStep(nyc_sample_df, transformFunc = f_datetime_transformations, transformPackages = "lubridate"))
head(rxDataStep(nyc_sample_df,                  transformFunc = f_datetime_transformations,                  transformPackages = "lubridate"))
st <- Sys.time() rxDataStep(nyc_xdf,             nyc_xdf,             overwrite = TRUE,             transformFunc = f_datetime_transformations,             transformPackages = "lubridate") Sys.time() - st
library(rgeos) library(sp) library(maptools) nyc_shapefile <- readShapePoly(paste0(data_dir, 'ZillowNeighborhoods-NY/ZillowNeighborhoods-NY.shp') mht_shapefile <- subset(nyc_shapefile, str_detect(CITY, 'New York City-Manhattan')) mht_shapefile@data$id <- as.character(mht_shapefile@data$NAME) mht.points <- fortify(gBuffer(mht_shapefile, byid = TRUE, width = 0), region = "NAME") mht.df <- inner_join(mht.points, mht_shapefile@data, by = "id") library(dplyr) mht.cent <- mht.df %>%   group_by(id) %>%   summarize(long = median(long), lat = median(lat)) library(ggrepel) ggplot(mht.df, aes(long, lat, fill = id)) +    geom_polygon() +   geom_path(color = "white") +   coord_equal() +   theme(legend.position = "none") +   geom_text_repel(aes(label = id), data = mht.cent, size = 3)
library(rgeos) library(sp) library(maptools) nyc_shapefile <- readShapePoly(paste0(data_dir, 'ZillowNeighborhoods-NY/ZillowNeighborhoods-NY.shp')) mht_shapefile <- subset(nyc_shapefile, str_detect(CITY, 'New York City-Manhattan')) mht_shapefile@data$id <- as.character(mht_shapefile@data$NAME) mht.points <- fortify(gBuffer(mht_shapefile, byid = TRUE, width = 0), region = "NAME") mht.df <- inner_join(mht.points, mht_shapefile@data, by = "id") library(dplyr) mht.cent <- mht.df %>%   group_by(id) %>%   summarize(long = median(long), lat = median(lat)) library(ggrepel) ggplot(mht.df, aes(long, lat, fill = id)) +    geom_polygon() +   geom_path(color = "white") +   coord_equal() +   theme(legend.position = "none") +   geom_text_repel(aes(label = id), data = mht.cent, size = 3)
find_nhoods <- function(data) {   # data <- as.data.frame(data)   pickup_longitude <- ifelse(is.na(data$pickup_longitude), 0, data$pickup_longitude)   pickup_latitude <- ifelse(is.na(data$pickup_latitude), 0, data$pickup_latitude)   dropoff_longitude <- ifelse(is.na(data$dropoff_longitude), 0, data$dropoff_longitude)   dropoff_latitude <- ifelse(is.na(data$dropoff_latitude), 0, data$dropoff_latitude)   data_coords <- data.frame(long = pickup_longitude, lat = pickup_latitude)   coordinates(data_coords) <- c('long', 'lat')   nhoods <- over(data_coords, shapefile)   data$pickup_nhood <- nhoods$NAME   data$pickup_borough <- nhoods$CITY   data_coords <- data.frame(long = dropoff_longitude, lat = dropoff_latitude)   coordinates(data_coords) <- c('long', 'lat')   nhoods <- over(data_coords, shapefile)   data$dropoff_nhood <- nhoods$NAME   data$dropoff_borough <- nhoods$CITY   data }
# test the function on a data.frame using rxDataStep head(rxDataStep(nyc_sample_df, transformFunc = find_nhoods, transformPackages = c("sp", "maptools"),                  transformObjects = list(shapefile = nyc_shapefile)))
st <- Sys.time() rxDataStep(nyc_xdf, nyc_xdf, overwrite = TRUE, transformFunc = find_nhoods, transformPackages = c("sp", "maptools", "rgeos"),             transformObjects = list(shapefile = nyc_shapefile)) Sys.time() - st head(nyc_xdf)
rxGetInfo(nyc_xdf)
file.remove(nyc_xdf@file)
input_xdf <- 'yellow_tripdata_2015.xdf' st <- Sys.time() rxImport(input_csv, input_xdf, colClasses = col_classes, overwrite = TRUE) for(ii in 2:3) { # get each month's data and append it to the first month's data     input_csv <- sprintf(paste0(data_dir, "yellow_tripdata_2015-%02d.csv"), ii)     rxImport(input_csv, input_xdf,               colClasses = col_classes,               overwrite = TRUE,              type = "textFast",              append = "rows")     print(input_csv) } Sys.time() - st # stores the time it took to import
input_xdf <- 'yellow_tripdata_2015.xdf' nyc_xdf <- RxXdfData(input_xdf) rxSummary( ~ fare_amount, nyc_xdf) # provide statistical summaries for fare amount
system.time(rxDataStep(nyc_xdf, nyc_xdf,                        transforms = list(tip_percent = tip_amount / fare_amount),                        overwrite = TRUE,                        blocksPerRead = 3)) rxSummary( ~ tip_percent, nyc_xdf)
f_datetime_transformations <- function(data) { # transformation function for extracting some date and time features   weekday_labels <- c('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat')   cut_levels <- c(1, 5, 9, 12, 16, 18, 22)   hour_labels <- c('1AM-5AM', '5AM-9AM', '9AM-12PM', '12PM-4PM', '4PM-6PM', '6PM-10PM', '10PM-1AM')   pickup_datetime <- ymd_hms(data$tpep_pickup_datetime, tz = "UTC")   pickup_hour <- addNA(cut(hour(pickup_datetime), cut_levels))   pickup_dow <- factor(wday(pickup_datetime), levels = 1:7, labels = weekday_labels)   levels(pickup_hour) <- hour_labels   dropoff_datetime <- ymd_hms(data$tpep_dropoff_datetime, tz = "UTC")   dropoff_hour <- addNA(cut(hour(dropoff_datetime), cut_levels))   dropoff_dow <- factor(wday(dropoff_datetime), levels = 1:7, labels = weekday_labels)   levels(dropoff_hour) <- hour_labels   data$pickup_hour <- pickup_hour   data$pickup_dow <- pickup_dow   data$dropoff_hour <- dropoff_hour   data$dropoff_dow <- dropoff_dow   data$trip_duration <- as.integer(as.duration(dropoff_datetime - pickup_datetime))   data }
library(lubridate) Sys.setenv(TZ = "US/Eastern") # not important for this dataset head(f_datetime_transformations(nyc_sample_df)) # test the function on a data.frame
head(rxDataStep(nyc_sample_df,                  transformFunc = f_datetime_transformations,                  transformPackages = "lubridate"))
st <- Sys.time() rxDataStep(nyc_xdf,             nyc_xdf,             overwrite = TRUE,             transformFunc = f_datetime_transformations,             transformPackages = "lubridate",            blocksPerRead = 4) Sys.time() - st
rxs1 <- rxSummary( ~ pickup_hour + pickup_dow + trip_duration, nyc_xdf) # we can add a column for proportions next to the counts rxs1$categorical <- lapply(rxs1$categorical, function(x) cbind(x, prop = round(prop.table(x$Counts), 2))) rxs1
rxs2 <- rxSummary( ~ pickup_dow:pickup_hour, nyc_xdf) rxs2 <- tidyr::spread(rxs2$categorical[[1]], key = 'pickup_hour', value = 'Counts') row.names(rxs2) <- rxs2[ , 1] rxs2 <- as.matrix(rxs2[ , -1]) print(rxs2)
levelplot(prop.table(rxs2, 2), cuts = 4, xlab = "", ylab = "", main = "Distribution of taxis by day of week")
library(rgeos) library(sp) library(maptools) nyc_shapefile <- readShapePoly(paste0(data_dir, 'ZillowNeighborhoods-NY/ZillowNeighborhoods-NY.shp')) mht_shapefile <- subset(nyc_shapefile, str_detect(CITY, 'New York City-Manhattan')) mht_shapefile@data$id <- as.character(mht_shapefile@data$NAME) mht.points <- fortify(gBuffer(mht_shapefile, byid = TRUE, width = 0), region = "NAME") mht.df <- inner_join(mht.points, mht_shapefile@data, by = "id") library(dplyr) mht.cent <- mht.df %>%   group_by(id) %>%   summarize(long = median(long), lat = median(lat)) library(ggrepel) ggplot(mht.df, aes(long, lat, fill = id)) +    geom_polygon() +   geom_path(color = "white") +   coord_equal() +   theme(legend.position = "none") +   geom_text_repel(aes(label = id), data = mht.cent, size = 3)
find_nhoods <- function(data) {   # data <- as.data.frame(data)   pickup_longitude <- ifelse(is.na(data$pickup_longitude), 0, data$pickup_longitude)   pickup_latitude <- ifelse(is.na(data$pickup_latitude), 0, data$pickup_latitude)   dropoff_longitude <- ifelse(is.na(data$dropoff_longitude), 0, data$dropoff_longitude)   dropoff_latitude <- ifelse(is.na(data$dropoff_latitude), 0, data$dropoff_latitude)   data_coords <- data.frame(long = pickup_longitude, lat = pickup_latitude)   coordinates(data_coords) <- c('long', 'lat')   nhoods <- over(data_coords, shapefile)   data$pickup_nhood <- nhoods$NAME   data$pickup_borough <- nhoods$CITY   data_coords <- data.frame(long = dropoff_longitude, lat = dropoff_latitude)   coordinates(data_coords) <- c('long', 'lat')   nhoods <- over(data_coords, shapefile)   data$dropoff_nhood <- nhoods$NAME   data$dropoff_borough <- nhoods$CITY   data }
# test the function on a data.frame using rxDataStep head(rxDataStep(nyc_sample_df,                  transformFunc = find_nhoods,                  transformPackages = c("sp", "maptools"),                 transformObjects = list(shapefile = nyc_shapefile)))
st <- Sys.time() rxDataStep(nyc_xdf, nyc_xdf,             overwrite = TRUE,             transformFunc = find_nhoods,             transformPackages = c("sp", "maptools", "rgeos"),            transformObjects = list(shapefile = nyc_shapefile),            blocksPerRead = 3) Sys.time() - st head(nyc_xdf)
input_xdf <- 'yellow_tripdata_2015.xdf' st <- Sys.time() rxImport(input_csv, input_xdf, colClasses = col_classes, overwrite = TRUE) for(ii in 2:3) { # get each month's data and append it to the first month's data     input_csv <- sprintf(paste0(data_dir, "yellow_tripdata_2015-%02d.csv"), ii)     rxImport(input_csv, input_xdf,               colClasses = col_classes,               overwrite = TRUE,              type = "textFast",              rowsPerRead = 10^6*5,              append = "rows")     print(input_csv) } Sys.time() - st # stores the time it took to import
nyc_csv <- RxTextData(input_csv, colClasses = col_classes) # point to CSV file and provide column info rxSummary( ~ fare_amount, nyc_csv) # provide statistical summaries for fare amount
rxGetInfo(nyc_xdf, getVarInfo = TRUE) # show column types and the first 10 rows
head(nyc_xdf)
system.time(rxDataStep(nyc_xdf, nyc_xdf,                        transforms = list(tip_percent = tip_amount / fare_amount),                        overwrite = TRUE,                        blocksPerRead = 1)) rxSummary( ~ tip_percent, nyc_xdf)
rx_sample <- function(inData, outFile, overwrite, sample_perc) {     rxDataStep(inData = inData, outFile = outFile,                 overwrite = overwrite,                 transforms = list(                     sample = factor(                         ifelse(rbinom(.rxNumRows,                                  size = 1, prob = sample_perc),                           "keep", "drop"))),                 rowSelection = (sample == "keep"),                 varsToDrop = "sample") -> xdf_file     return(xdf_file) }
nyc_sample <- rx_sample(nyc_xdf, RxXdfData("nyc_sample.xdf"), overwrite = FALSE, 0.10)
rx_sample <- function(inData, outFile, overwrite, sample_perc) {     rxDataStep(inData = inData, outFile = outFile,                 overwrite = overwrite,                 transforms = list(                     sample = factor(                         ifelse(rbinom(.rxNumRows,                                  size = 1, prob = sample_perc),                           "keep", "drop")))) -> xdf_file     return(xdf_file) }
nyc_sample <- rx_sample(nyc_xdf, RxXdfData("nyc_sample.xdf"), overwrite = FALSE, 0.10)
rx_sample <- function(inData, outFile, overwrite, samplePerc) {     rxDataStep(inData = inData, outFile = outFile,                 overwrite = overwrite,                 transforms = list(                     sample = factor(                         ifelse(rbinom(.rxNumRows,                                  size = 1, prob = sample_perc),                           "keep", "drop"))),                 transformObjects = list(sample_perc = samplePerc),                 rowSelection = (sample == "keep"),                 varsToDrop = "sample") -> xdf_file     return(xdf_file) }
nyc_sample <- rx_sample(nyc_xdf, RxXdfData("nyc_sample.xdf"), overwrite = FALSE, 0.10)
nyc_sample <- create_partition(nyc_xdf, 0.10))
nyc_sample <- create_partition(nyc_xdf, 0.10)
create_partition <- function(xdf = mort_xdf,                              partition_size = 0.75,                              output_path = "/output/", ...) {     rxDataStep(inData = xdf,              outFile = xdf,              transforms = list(                trainvalidate = factor(                    ifelse(rbinom(.rxNumRows,                                  size = 1, prob = splitperc),                           "train", "validate")                )            ),            transformObjects = list(splitperc = partition_size),            overwrite = TRUE, ...)     splitDS <- rxSplit(inData = xdf,                      outFilesBase = "",                      outFileSuffixes = c("train", "validate"),                      splitByFactor = "trainvalidate",                      overwrite = TRUE)     return(splitDS) } nyc_sample <- create_partition(nyc_xdf, 0.10)
rxGetInfo(nyc_sample[[1]])
nyc_xdf <- nyc_sample[[1]]
head(nyc_sample)
head(nyc_xdf)
ls)()
ls()
getwd()
options(max.print = 1000, scipen = 999, width = 80) library(RevoScaleR) rxOptions(reportProgress = 1) # reduces the amount of output RevoScaleR produces library(dplyr) options(dplyr.print_max = 20) options(dplyr.width = Inf) # shows all columns of a tbl_df object library(stringr) library(lubridate) library(rgeos) # spatial package library(sp) # spatial package library(maptools) # spatial package library(ggplot2) library(gridExtra) # for putting plots side by side library(ggrepel) # avoid text overlap in plots library(tidyr) library(seriation) # package for reordering a distance matrix
data_dir <- "data/"
col_classes <- c('VendorID' = "factor",                  'tpep_pickup_datetime' = "character",                  'tpep_dropoff_datetime' = "character",                  'passenger_count' = "integer",                  'trip_distance' = "numeric",                  'pickup_longitude' = "numeric",                  'pickup_latitude' = "numeric",                  'RateCodeID' = "factor",                  'store_and_fwd_flag' = "factor",                  'dropoff_longitude' = "numeric",                  'dropoff_latitude' = "numeric",                  'payment_type' = "factor",                  'fare_amount' = "numeric",                  'extra' = "numeric",                  'mta_tax' = "numeric",                  'tip_amount' = "numeric",                  'tolls_amount' = "numeric",                  'improvement_surcharge' = "numeric",                  'total_amount' = "numeric")
input_csv <- paste0(data_dir, 'yellow_tripdata_2015-01.csv') # we take a chunk of the data and load it as a data.frame (good for testing things) nyc_sample_df <- read.csv(input_csv, nrows = 1000, colClasses = col_classes) head(nyc_sample_df)
nyc_xdf <- RxXdfData("yellow_tripdata_2015.trainvalidate.train.xdf")
rxSummary( ~ fare_amount, nyc_xdf) # provide statistical summaries for fare amount
rxGetInfo(nyc_xdf, getVarInfo = TRUE) # show column types and the first 10 rows
head(nyc_xdf)
```
